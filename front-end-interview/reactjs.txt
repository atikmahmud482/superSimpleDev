📘 React.js Interview Notes (Quick & Practical)
🔹 1. What is React?
Library (not framework) for building UI.

Developed by Facebook, based on components and JSX.

function App() {
  return <h1>Hello React</h1>;
}

🔹 2. JSX (JavaScript XML)
Looks like HTML, but it's syntactic sugar for React.createElement.

Must return a single parent element.

const element = <div>Hello, {name}</div>;

🔹 3. Components
Functional Components (most common now)

Props: Pass data from parent to child

function Welcome({ name }) {
  return <h2>Hello, {name}</h2>;
}

🔹 4. State (useState)
State holds dynamic data in components.

import { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);
  return <button onClick={() => setCount(count + 1)}>{count}</button>;
}

🔹 5. useEffect (Side Effects)
Runs after render. Used for:

API calls
Event listeners
DOM updates

useEffect(() => {
  fetchData();
}, []); // [] = run only once (on mount)

🔹 6. Props vs State
Props	               State
Passed from parent	   Managed in component
Read-only	           Can be updated

🔹 7. Event Handling
<button onClick={() => alert("Clicked")}>Click Me</button>

🔹 8. Lists and Keys
{items.map(item => (
  <li key={item.id}>{item.name}</li>
))}

🔹 9. Conditional Rendering
{isLoggedIn ? <Logout /> : <Login />}

🔹 10. React Router DOM (v6+)
import { BrowserRouter, Routes, Route } from 'react-router-dom';

<BrowserRouter>
  <Routes>
    <Route path="/" element={<Home />} />
    <Route path="/about" element={<About />} />
  </Routes>
</BrowserRouter>

🔹 11. Lifting State Up
When two child components need to share data, lift state to the parent.

🔹 12. Controlled Component (Form Handling)
const [name, setName] = useState("");

<input value={name} onChange={e => setName(e.target.value)} />

🔹 13. useRef (Reference DOM)
const inputRef = useRef();
<input ref={inputRef} />

🔹 14. Reusable Component Example
function Button({ text, onClick }) {
  return <button onClick={onClick}>{text}</button>;
}

🔹 15. Common React Questions
Q: What is virtual DOM?
A lightweight JS copy of the real DOM. React uses it to detect changes efficiently.

Q: Why keys in list?
To help React identify which items changed/updated efficiently.

Q: Difference between useEffect and useState?

useState stores data

useEffect runs side effects after rendering

Q: Can we update props?
No. Props are read-only. Use state for updates.

🔹 Bonus (Advanced Topics You May Hear)
Custom Hooks: Reusable logic functions

Context API: Global state sharing

React.memo: Prevent re-renders

React Fragment: <>...</> instead of <div>

⚛️ React.js Core Concepts
1. JSX
JSX lets you write HTML inside JavaScript.
const heading = <h1>Hello, Atik!</h1>;

2. Functional Components
const Welcome = ({ name }) => <h1>Hello, {name}</h1>;

3. Props
Props are read-only and passed from parent to child.
<Profile name="Atik" />

4. State with useState
const [count, setCount] = useState(0);

5. useEffect
useEffect(() => {
  console.log("Mounted or Updated");
}, [dependency]);

6. Event Handling
<button onClick={() => alert("Clicked!")}>Click</button>

7. Conditional Rendering
{isLoggedIn ? <Dashboard /> : <Login />}

8. List Rendering
{items.map(item => <li key={item.id}>{item.name}</li>)}

9. useRef
const inputRef = useRef();
<input ref={inputRef} />

10. Context API
const ThemeContext = createContext("light");
const theme = useContext(ThemeContext);

✅ Top 15 React Interview Questions & Answers
1. What is React?
React is a JavaScript library for building user interfaces using components and a virtual DOM for efficient updates.

2. What is JSX?
JSX is a syntax extension that lets you write HTML inside JavaScript. It's not required, but widely used in React.

3. What are components?
Components are reusable UI blocks. They can be functional or class-based.

4. What is the difference between props and state?
Props	            State
Read-only	        Mutable
Passed down	      Local to component
Used for config	  Used for data changes

5. What is useEffect used for?
useEffect handles side effects like API calls, DOM manipulation, and timers.

6. What is Virtual DOM?
Virtual DOM is an in-memory representation of the real DOM. React updates the virtual DOM first and efficiently syncs it with the real DOM.

7. What is a key in a list?
A key is a unique identifier for list items used to optimize rendering.

8. What is lifting state up?
Moving state to the nearest common parent component to share data between children.

9. What is controlled vs uncontrolled component?
Controlled: React controls the form data via useState

Uncontrolled: Data is handled by the DOM using ref

10. What is React Router?
A routing library used to navigate between components/pages in a SPA.
<Route path="/about" element={<About />} />

11. What are hooks in React?
Hooks let you use state and other React features without writing a class.

Common hooks:

useState
useEffect
useContext
useRef
useMemo
useCallback