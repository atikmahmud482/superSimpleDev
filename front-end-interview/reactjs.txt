ðŸ“˜ React.js Interview Notes (Quick & Practical)
ðŸ”¹ 1. What is React?
Library (not framework) for building UI.

Developed by Facebook, based on components and JSX.

function App() {
  return <h1>Hello React</h1>;
}

ðŸ”¹ 2. JSX (JavaScript XML)
Looks like HTML, but it's syntactic sugar for React.createElement.

Must return a single parent element.

const element = <div>Hello, {name}</div>;

ðŸ”¹ 3. Components
Functional Components (most common now)

Props: Pass data from parent to child

function Welcome({ name }) {
  return <h2>Hello, {name}</h2>;
}

ðŸ”¹ 4. State (useState)
State holds dynamic data in components.

import { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);
  return <button onClick={() => setCount(count + 1)}>{count}</button>;
}

ðŸ”¹ 5. useEffect (Side Effects)
Runs after render. Used for:

API calls
Event listeners
DOM updates

useEffect(() => {
  fetchData();
}, []); // [] = run only once (on mount)

ðŸ”¹ 6. Props vs State
Props	               State
Passed from parent	   Managed in component
Read-only	           Can be updated

ðŸ”¹ 7. Event Handling
<button onClick={() => alert("Clicked")}>Click Me</button>

ðŸ”¹ 8. Lists and Keys
{items.map(item => (
  <li key={item.id}>{item.name}</li>
))}

ðŸ”¹ 9. Conditional Rendering
{isLoggedIn ? <Logout /> : <Login />}

ðŸ”¹ 10. React Router DOM (v6+)
import { BrowserRouter, Routes, Route } from 'react-router-dom';

<BrowserRouter>
  <Routes>
    <Route path="/" element={<Home />} />
    <Route path="/about" element={<About />} />
  </Routes>
</BrowserRouter>

ðŸ”¹ 11. Lifting State Up
When two child components need to share data, lift state to the parent.

ðŸ”¹ 12. Controlled Component (Form Handling)
const [name, setName] = useState("");

<input value={name} onChange={e => setName(e.target.value)} />

ðŸ”¹ 13. useRef (Reference DOM)
const inputRef = useRef();
<input ref={inputRef} />

ðŸ”¹ 14. Reusable Component Example
function Button({ text, onClick }) {
  return <button onClick={onClick}>{text}</button>;
}

ðŸ”¹ 15. Common React Questions
Q: What is virtual DOM?
A lightweight JS copy of the real DOM. React uses it to detect changes efficiently.

Q: Why keys in list?
To help React identify which items changed/updated efficiently.

Q: Difference between useEffect and useState?

useState stores data

useEffect runs side effects after rendering

Q: Can we update props?
No. Props are read-only. Use state for updates.

ðŸ”¹ Bonus (Advanced Topics You May Hear)
Custom Hooks: Reusable logic functions

Context API: Global state sharing

React.memo: Prevent re-renders

React Fragment: <>...</> instead of <div>

