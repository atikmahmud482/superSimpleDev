In React, Context provides a way to pass data through the component tree without having to pass props down manually at every level. Itâ€™s useful for global data like authentication status, themes, or user preferences.

ðŸ§  Why use React Context?
To avoid "prop drilling" (passing props through multiple layers).

To manage global state more cleanly.

To share values between deeply nested components.

ðŸ›  How to Use Context in React
1. Create the Context

import React, { createContext } from 'react';

export const ThemeContext = createContext();

2. Provide the Context (in a parent component)
export const ThemeProvider = ({ children }) => {
  const theme = 'dark'; // or use useState/useReducer for dynamic values

  return (
    <ThemeContext.Provider value={{ theme }}>
      {children}
    </ThemeContext.Provider>
  );
};
You typically wrap your app (or a part of it) in this provider:
import { ThemeProvider } from './ThemeContext';

function App() {
  return (
    <ThemeProvider>
      <YourComponent />
    </ThemeProvider>
  );
}

3. Consume the Context (in any child component)
import { useContext } from 'react';
import { ThemeContext } from './ThemeContext';

const ThemedComponent = () => {
  const { theme } = useContext(ThemeContext);

  return <div>The current theme is {theme}</div>;
};
