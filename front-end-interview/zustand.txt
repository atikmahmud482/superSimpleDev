Zustand is a fast, simple, and scalable state management library for React. It's lighter than Redux and easier to set up, making it a popular choice for frontend developers who want global state without boilerplate.

🐻 What is Zustand?
Zustand (German for state) lets you create global state using a minimal API — no reducers, no actions, no context boilerplate.

✅ Why Use Zustand?
Zero boilerplate

Built-in support for React hooks

React-free store (you can use it outside components)

Partial updates with selective re-renders

Ideal for both small and large applications

🚀 Basic Usage
1. Install
npm install zustand
# or
yarn add zustand

2. Create a Store
// store.js
import { create } from 'zustand';

const useBearStore = create((set) => ({
  bears: 0,
  increase: () => set((state) => ({ bears: state.bears + 1 })),
  reset: () => set({ bears: 0 }),
}));

3. Use Store in Components
import useBearStore from './store';

function BearCounter() {
  const bears = useBearStore((state) => state.bears);
  return <h1>{bears} bears</h1>;
}

function Controls() {
  const increase = useBearStore((state) => state.increase);
  return <button onClick={increase}>Add Bear</button>;
}

⚒ Features
🔄 Partial Subscriptions (Better Performance)
const bears = useBearStore((state) => state.bears);
Only re-renders when bears changes.

🧠 Combine with Zustand Devtools
npm install zustand zustand-middleware
import { create } from 'zustand';
import { devtools } from 'zustand/middleware';

const useStore = create(devtools((set) => ({
  count: 0,
  increment: () => set((state) => ({ count: state.count + 1 })),
})));
